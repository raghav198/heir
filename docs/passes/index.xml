<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>HEIR â€“ Passes</title><link>https://heir.dev/docs/passes/</link><description>Recent content in Passes on HEIR</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://heir.dev/docs/passes/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: ApplyFoldersPasses</title><link>https://heir.dev/docs/passes/applyfolderspasses/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heir.dev/docs/passes/applyfolderspasses/</guid><description>
&lt;!-- Autogenerated by mlir-tblgen; don't manually edit -->
&lt;h3 id="-apply-folders">&lt;code>-apply-folders&lt;/code>&lt;/h3>
&lt;p>&lt;em>Apply all folding patterns from canonicalize&lt;/em>&lt;/p>
&lt;p>This pass applies all registered folding patterns greedily to the input IR.
This is useful when running a full canonicalize is too slow, but applying
folders before canonicalize is sufficient to simplify the IR for later
passes, or even sufficient to then subsequently run a full canonicalize pass.&lt;/p>
&lt;p>This is used to prepare an IR for &lt;code>insert-rotate&lt;/code> after fully unrolling
loops.&lt;/p></description></item><item><title>Docs: BGVToOpenfhe</title><link>https://heir.dev/docs/passes/bgvtoopenfhe/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heir.dev/docs/passes/bgvtoopenfhe/</guid><description>
&lt;!-- Autogenerated by mlir-tblgen; don't manually edit -->
&lt;h3 id="-bgv-to-openfhe">&lt;code>-bgv-to-openfhe&lt;/code>&lt;/h3>
&lt;p>&lt;em>Lower &lt;code>bgv&lt;/code> to &lt;code>openfhe&lt;/code> dialect.&lt;/em>&lt;/p>
&lt;p>This pass lowers the &lt;code>bgv&lt;/code> dialect to &lt;code>Openfhe&lt;/code> dialect.&lt;/p></description></item><item><title>Docs: CGGIPasses</title><link>https://heir.dev/docs/passes/cggipasses/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heir.dev/docs/passes/cggipasses/</guid><description>
&lt;!-- Autogenerated by mlir-tblgen; don't manually edit -->
&lt;h3 id="-cggi-canonicalize-luts">&lt;code>-cggi-canonicalize-luts&lt;/code>&lt;/h3></description></item><item><title>Docs: CGGIToTfheRust</title><link>https://heir.dev/docs/passes/cggitotfherust/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heir.dev/docs/passes/cggitotfherust/</guid><description>
&lt;!-- Autogenerated by mlir-tblgen; don't manually edit -->
&lt;h3 id="-cggi-to-tfhe-rust">&lt;code>-cggi-to-tfhe-rust&lt;/code>&lt;/h3>
&lt;p>&lt;em>Lower &lt;code>cggi&lt;/code> to &lt;code>tfhe_rust&lt;/code> dialect.&lt;/em>&lt;/p></description></item><item><title>Docs: CGGIToTfheRustBool</title><link>https://heir.dev/docs/passes/cggitotfherustbool/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heir.dev/docs/passes/cggitotfherustbool/</guid><description>
&lt;!-- Autogenerated by mlir-tblgen; don't manually edit -->
&lt;h3 id="-cggi-to-tfhe-rust-bool">&lt;code>-cggi-to-tfhe-rust-bool&lt;/code>&lt;/h3>
&lt;p>&lt;em>Lower &lt;code>cggi&lt;/code> to &lt;code>tfhe_rust_bool&lt;/code> dialect.&lt;/em>&lt;/p></description></item><item><title>Docs: CombToCGGI</title><link>https://heir.dev/docs/passes/combtocggi/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heir.dev/docs/passes/combtocggi/</guid><description>
&lt;!-- Autogenerated by mlir-tblgen; don't manually edit -->
&lt;h3 id="-comb-to-cggi">&lt;code>-comb-to-cggi&lt;/code>&lt;/h3>
&lt;p>&lt;em>Lower &lt;code>comb&lt;/code> to &lt;code>cggi&lt;/code> dialect.&lt;/em>&lt;/p>
&lt;p>This pass lowers the &lt;code>comb&lt;/code> dialect to &lt;code>cggi&lt;/code> dialect.&lt;/p></description></item><item><title>Docs: ElementwiseToAffinePasses</title><link>https://heir.dev/docs/passes/elementwisetoaffinepasses/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heir.dev/docs/passes/elementwisetoaffinepasses/</guid><description>
&lt;!-- Autogenerated by mlir-tblgen; don't manually edit -->
&lt;h3 id="-convert-elementwise-to-affine">&lt;code>-convert-elementwise-to-affine&lt;/code>&lt;/h3>
&lt;p>&lt;em>This pass lowers ElementwiseMappable operations to Affine loops.&lt;/em>&lt;/p>
&lt;p>This pass lowers ElementwiseMappable operations over tensors
to affine loop nests that instead apply the operation to the underlying scalar values.&lt;/p></description></item><item><title>Docs: ForwardStoreToLoadPasses</title><link>https://heir.dev/docs/passes/forwardstoretoloadpasses/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heir.dev/docs/passes/forwardstoretoloadpasses/</guid><description>
&lt;!-- Autogenerated by mlir-tblgen; don't manually edit -->
&lt;h3 id="-forward-store-to-load">&lt;code>-forward-store-to-load&lt;/code>&lt;/h3>
&lt;p>&lt;em>Forward stores to loads within a single block&lt;/em>&lt;/p>
&lt;p>This pass is a simplified version of mem2reg and similar passes.
It analyzes an operation, finding all basic blocks within that op
that have memrefs whose stores can be forwarded to loads.&lt;/p>
&lt;p>Does not support complex control flow within a block, nor ops
with arbitrary subregions.&lt;/p></description></item><item><title>Docs: FullLoopUnrollPasses</title><link>https://heir.dev/docs/passes/fullloopunrollpasses/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heir.dev/docs/passes/fullloopunrollpasses/</guid><description>
&lt;!-- Autogenerated by mlir-tblgen; don't manually edit -->
&lt;h3 id="-full-loop-unroll">&lt;code>-full-loop-unroll&lt;/code>&lt;/h3>
&lt;p>&lt;em>Fully unroll all loops&lt;/em>&lt;/p>
&lt;p>Scan the IR for affine.for loops and unroll them all.&lt;/p></description></item><item><title>Docs: LWEPasses</title><link>https://heir.dev/docs/passes/lwepasses/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heir.dev/docs/passes/lwepasses/</guid><description>
&lt;!-- Autogenerated by mlir-tblgen; don't manually edit -->
&lt;h3 id="-lwe-set-default-parameters">&lt;code>-lwe-set-default-parameters&lt;/code>&lt;/h3>
&lt;p>&lt;em>Set default parameters for LWE ops&lt;/em>&lt;/p>
&lt;p>This pass adds default parameters to all &lt;code>lwe&lt;/code> types as the &lt;code>lwe_params&lt;/code>
attribute, and for &lt;code>lwe&lt;/code> ops as the &lt;code>params&lt;/code> attribute, overriding any
existing attributes set with those names.&lt;/p>
&lt;p>This pass is primarily for testing purposes, and as a parameter provider
before a proper parameter selection mechanism is added. This pass should not
be used in production.&lt;/p>
&lt;p>The specific parameters are hard-coded in
&lt;code>lib/Dialect/LWE/Transforms/SetDefaultParameters.cpp&lt;/code>.&lt;/p></description></item><item><title>Docs: MemrefToArith</title><link>https://heir.dev/docs/passes/memreftoarith/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heir.dev/docs/passes/memreftoarith/</guid><description>
&lt;!-- Autogenerated by mlir-tblgen; don't manually edit -->
&lt;h3 id="-expand-copy">&lt;code>-expand-copy&lt;/code>&lt;/h3>
&lt;p>&lt;em>Expands memref.copy ops to explicit affine loads and stores&lt;/em>&lt;/p>
&lt;p>This pass removes memref copy operations by expanding them to affine loads
and stores. This pass introduces affine loops over the dimensions of the
MemRef, so must be run prior to any affine loop unrolling in a pipeline.&lt;/p>
&lt;p>Input&lt;/p>
&lt;pre tabindex="0">&lt;code>module {
func.func @memref_copy() {
%alloc = memref.alloc() : memref&amp;lt;2x3xi32&amp;gt;
%alloc_0 = memref.alloc() : memref&amp;lt;2x3xi32&amp;gt;
memref.copy %alloc, %alloc_0 : memref&amp;lt;1x1xi32&amp;gt; to memref&amp;lt;1x1xi32&amp;gt;
}
}
&lt;/code>&lt;/pre>&lt;p>Output&lt;/p>
&lt;pre tabindex="0">&lt;code>module {
func.func @memref_copy() {
%alloc = memref.alloc() : memref&amp;lt;2x3xi32&amp;gt;
%alloc_0 = memref.alloc() : memref&amp;lt;2x3xi32&amp;gt;
affine.for %arg0 = 0 to 2 {
affine.for %arg1 = 0 to 3 {
%1 = affine.load %alloc[%arg0, %arg1] : memref&amp;lt;2x3xi32&amp;gt;
affine.store %1, %alloc_0[%arg0, %arg1] : memref&amp;lt;2x3xi32&amp;gt;
}
}
}
}
&lt;/code>&lt;/pre>&lt;p>When &lt;code>--disable-affine-loop=true&lt;/code> is set, then the output becomes&lt;/p>
&lt;pre tabindex="0">&lt;code>module {
func.func @memref_copy() {
%alloc = memref.alloc() : memref&amp;lt;2x3xi32&amp;gt;
%alloc_0 = memref.alloc() : memref&amp;lt;2x3xi32&amp;gt;
%c0 = arith.constant 0 : index
%c1 = arith.constant 1 : index
%c2 = arith.constant 2 : index
%0 = affine.load %alloc[%c0, %c0] : memref&amp;lt;2x3xi32&amp;gt;
affine.store %0, %alloc_0[%c0, %c0] : memref&amp;lt;2x3xi32&amp;gt;
%1 = affine.load %alloc[%c0, %c1] : memref&amp;lt;2x3xi32&amp;gt;
affine.store %1, %alloc_0[%c0, %c1] : memref&amp;lt;2x3xi32&amp;gt;
%2 = affine.load %alloc[%c0, %c2] : memref&amp;lt;2x3xi32&amp;gt;
affine.store %2, %alloc_0[%c0, %c2] : memref&amp;lt;2x3xi32&amp;gt;
[...]
}
}
&lt;/code>&lt;/pre>&lt;h4 id="options">Options&lt;/h4>
&lt;pre tabindex="0">&lt;code>-disable-affine-loop : Use this to control to disable using affine loops
&lt;/code>&lt;/pre>&lt;h3 id="-extract-loop-body">&lt;code>-extract-loop-body&lt;/code>&lt;/h3>
&lt;p>&lt;em>Extracts logic of a loop bodies into functions.&lt;/em>&lt;/p>
&lt;p>This pass extracts logic in the inner body of for loops into functions.&lt;/p>
&lt;p>This pass requires that tensors are lowered to memref. It expects that a
loop body contains a number of affine.load statements used as inputs to the
extracted function, and a single affine.store used as the extracted
function&amp;rsquo;s output.&lt;/p>
&lt;p>Input&lt;/p>
&lt;pre tabindex="0">&lt;code>module {
func.func @loop_body() {
%c-128_i8 = arith.constant -128 : i8
%c127_i8 = arith.constant 127 : i8
%alloc_7 = memref.alloc() {alignment = 64 : i64} : memref&amp;lt;25x20x8xi8&amp;gt;
affine.for %arg1 = 0 to 25 {
affine.for %arg2 = 0 to 20 {
affine.for %arg3 = 0 to 8 {
%98 = affine.load %alloc_6[%arg1, %arg2, %arg3] : memref&amp;lt;25x20x8xi8&amp;gt;
%99 = arith.cmpi slt, %arg0, %c-128_i8 : i8
%100 = arith.select %99, %c-128_i8, %arg0 : i8
%101 = arith.cmpi sgt, %arg0, %c127_i8 : i8
%102 = arith.select %101, %c127_i8, %100 : i8
affine.store %102, %alloc_7[%arg1, %arg2, %arg3] : memref&amp;lt;25x20x8xi8&amp;gt;
}
}
}
}
}
&lt;/code>&lt;/pre>&lt;p>Output&lt;/p>
&lt;pre tabindex="0">&lt;code>module {
func.func @loop_body() {
%alloc_7 = memref.alloc() {alignment = 64 : i64} : memref&amp;lt;25x20x8xi8&amp;gt;
affine.for %arg1 = 0 to 25 {
affine.for %arg2 = 0 to 20 {
affine.for %arg3 = 0 to 8 {
%98 = affine.load %alloc_6[%arg1, %arg2, %arg3] : memref&amp;lt;25x20x8xi8&amp;gt;
%102 = func.call @__for_loop(%98) : (i8) -&amp;gt; i8
affine.store %102, %alloc_7[%arg1, %arg2, %arg3] : memref&amp;lt;25x20x8xi8&amp;gt;
}
}
}
}
func.func private @__for_loop(%arg0: i8) -&amp;gt; i8 {
%c-128_i8 = arith.constant -128 : i8
%c127_i8 = arith.constant 127 : i8
%99 = arith.cmpi slt, %arg0, %c-128_i8 : i8
%100 = arith.select %99, %c-128_i8, %arg0 : i8
%101 = arith.cmpi sgt, %arg0, %c127_i8 : i8
%102 = arith.select %101, %c127_i8, %100 : i8
return %102 : i8
}
}
&lt;/code>&lt;/pre>&lt;h4 id="options-1">Options&lt;/h4>
&lt;pre tabindex="0">&lt;code>-min-loop-size : Use this to control the minimum loop size to apply this pass
-min-body-size : Use this to control the minimum loop body size to apply this pass
&lt;/code>&lt;/pre>&lt;h3 id="-memref-global-replace">&lt;code>-memref-global-replace&lt;/code>&lt;/h3>
&lt;p>&lt;em>MemrefGlobalReplacePass forwards global memrefs accessors to arithmetic values&lt;/em>&lt;/p>
&lt;p>This pass forwards constant global MemRef values to referencing affine
loads. This pass requires that the MemRef global values are initialized as
constants and that the affine load access indices are constants (i.e. not
variadic). Unroll affine loops prior to running this pass.&lt;/p>
&lt;p>MemRef removal is required to remove any memory allocations from the input
model (for example, TensorFlow models contain global memory holding model
weights) to support FHE transpilation.&lt;/p>
&lt;p>Input&lt;/p>
&lt;pre tabindex="0">&lt;code>module {
memref.global &amp;#34;private&amp;#34; constant @__constant_8xi16 : memref&amp;lt;2x4xi16&amp;gt; = dense&amp;lt;[[-10, 20, 3, 4], [5, 6, 7, 8]]&amp;gt;
func.func @main() -&amp;gt; i16 {
%c1 = arith.constant 1 : index
%c2 = arith.constant 2 : index
%0 = memref.get_global @__constant_8xi16 : memref&amp;lt;2x4xi16&amp;gt;
%1 = affine.load %0[%c1, %c1 + %c2] : memref&amp;lt;2x4xi16&amp;gt;
return %1 : i16
}
}
&lt;/code>&lt;/pre>&lt;p>Output&lt;/p>
&lt;pre tabindex="0">&lt;code>module {
func.func @main() -&amp;gt; i16 {
%c1 = arith.constant 1 : index
%c2 = arith.constant 2 : index
%c8_i16 = arith.constant 8 : i16
return %c8_i16 : i16
}
}
&lt;/code>&lt;/pre>&lt;h3 id="-unroll-and-forward">&lt;code>-unroll-and-forward&lt;/code>&lt;/h3>
&lt;p>&lt;em>Loop unrolls and forwards stores to loads.&lt;/em>&lt;/p>
&lt;p>This pass processes the first function in a given module, and, starting from
the first loop, iteratively does the following:&lt;/p>
&lt;ol>
&lt;li>Fully unroll the loop.&lt;/li>
&lt;li>Scan for load ops. For each load op with a statically-inferrable access
index:&lt;/li>
&lt;li>Backtrack to the original memref alloc&lt;/li>
&lt;li>Find all store ops at the corresponding index (possibly transitively
through renames/subviews of the underlying alloc).&lt;/li>
&lt;li>Find the last store that occurs and forward it to the load.&lt;/li>
&lt;li>If the original memref is an input memref, then forward through any
renames to make the target load load directly from the argument memref
(instead of any subviews, say)&lt;/li>
&lt;li>Apply the same logic to any remaining loads not inside any for loop.&lt;/li>
&lt;/ol>
&lt;p>This pass requires that tensors are lowered to memref, and only supports
affine loops with affine.load/store ops.&lt;/p>
&lt;p>Memrefs that result from memref.get_global ops are excluded from
forwarding, even if they are loaded with a static index, and are instead
handled by memref-global-replace, which should be run after this pass.&lt;/p></description></item><item><title>Docs: PolynomialPasses</title><link>https://heir.dev/docs/passes/polynomialpasses/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heir.dev/docs/passes/polynomialpasses/</guid><description>
&lt;!-- Autogenerated by mlir-tblgen; don't manually edit -->
&lt;h3 id="-convert-polynomial-mul-to-ntt">&lt;code>-convert-polynomial-mul-to-ntt&lt;/code>&lt;/h3>
&lt;p>&lt;em>Rewrites polynomial operations to their NTT equivalents&lt;/em>&lt;/p>
&lt;p>Applies a rewrite pattern to convert polynomial multiplication to the
equivalent using the number-theoretic transforms (NTT) when possible.&lt;/p>
&lt;p>Polynomial multiplication can be rewritten as polynomial.NTT
on each operand, followed by modulo elementwise multiplication of the
point-value representation and then the inverse-NTT back to coefficient
representation.&lt;/p></description></item><item><title>Docs: PolynomialToStandard</title><link>https://heir.dev/docs/passes/polynomialtostandard/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heir.dev/docs/passes/polynomialtostandard/</guid><description>
&lt;!-- Autogenerated by mlir-tblgen; don't manually edit -->
&lt;h3 id="-polynomial-to-standard">&lt;code>-polynomial-to-standard&lt;/code>&lt;/h3>
&lt;p>&lt;em>Lower &lt;code>polynomial&lt;/code> to standard MLIR dialects.&lt;/em>&lt;/p>
&lt;p>This pass lowers the &lt;code>polynomial&lt;/code> dialect to standard MLIR, a mixture of
affine, tensor, and arith.&lt;/p></description></item><item><title>Docs: SecretizePasses</title><link>https://heir.dev/docs/passes/secretizepasses/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heir.dev/docs/passes/secretizepasses/</guid><description>
&lt;!-- Autogenerated by mlir-tblgen; don't manually edit -->
&lt;h3 id="-secretize">&lt;code>-secretize&lt;/code>&lt;/h3>
&lt;p>&lt;em>Adds secret argument attributes to entry function&lt;/em>&lt;/p>
&lt;p>Adds a secret.secret attribute argument to each argument in the entry
function of an MLIR module. By default, the function is &lt;code>main&lt;/code>. This may be
overridden with the option -entry-function=top_level_func.&lt;/p>
&lt;h4 id="options">Options&lt;/h4>
&lt;pre tabindex="0">&lt;code>-entry-function : entry function of the module
&lt;/code>&lt;/pre>&lt;h3 id="-wrap-generic">&lt;code>-wrap-generic&lt;/code>&lt;/h3>
&lt;p>&lt;em>Wraps regions using secret args in secret.generic bodies&lt;/em>&lt;/p>
&lt;p>This pass wraps function regions of &lt;code>func.func&lt;/code> that use secret arguments in
&lt;code>secret.generic&lt;/code> bodies.&lt;/p>
&lt;p>Secret arguments are annotated using a &lt;code>secret.secret&lt;/code> argument attribute.
This pass converts these to secret types and then inserts a &lt;code>secret.generic&lt;/code>
body to hold the functions region. The output type is also converted to a
secret.&lt;/p>
&lt;p>Example input:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-mlir" data-lang="mlir">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">func&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">@main&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">%arg0&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">i32&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>secret&lt;span style="color:#000;font-weight:bold">.&lt;/span>secret&lt;span style="color:#000;font-weight:bold">})&lt;/span> &lt;span style="color:#000;font-weight:bold">-&amp;gt;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">i32&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">%0&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> arith&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#204a87;font-weight:bold">constant&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">100&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">%1&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> arith&lt;span style="color:#000;font-weight:bold">.&lt;/span>addi &lt;span style="color:#000">%0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">%arg0&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">%1&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Output:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-mlir" data-lang="mlir">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">func&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">@main&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">%arg0&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">!&lt;/span>secret&lt;span style="color:#000;font-weight:bold">.&lt;/span>secret&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">i32&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;)&lt;/span> &lt;span style="color:#000;font-weight:bold">-&amp;gt;&lt;/span> &lt;span style="color:#000;font-weight:bold">!&lt;/span>secret&lt;span style="color:#000;font-weight:bold">.&lt;/span>secret&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">i32&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">%0&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> secret&lt;span style="color:#000;font-weight:bold">.&lt;/span>generic ins&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">%arg0&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">!&lt;/span>secret&lt;span style="color:#000;font-weight:bold">.&lt;/span>secret&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">i32&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f57900">^bb0&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">%arg1&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">i32&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">%1&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> arith&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#204a87;font-weight:bold">constant&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">100&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">%2&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> arith&lt;span style="color:#000;font-weight:bold">.&lt;/span>addi &lt;span style="color:#000">%0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">%arg1&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> secret&lt;span style="color:#000;font-weight:bold">.&lt;/span>yield &lt;span style="color:#000">%2&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span> &lt;span style="color:#000;font-weight:bold">-&amp;gt;&lt;/span> &lt;span style="color:#000;font-weight:bold">!&lt;/span>secret&lt;span style="color:#000;font-weight:bold">.&lt;/span>secret&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">i32&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">%0&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">!&lt;/span>secret&lt;span style="color:#000;font-weight:bold">.&lt;/span>secret&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">i32&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: SecretPasses</title><link>https://heir.dev/docs/passes/secretpasses/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heir.dev/docs/passes/secretpasses/</guid><description>
&lt;!-- Autogenerated by mlir-tblgen; don't manually edit -->
&lt;h3 id="-secret-capture-generic-ambient-scope">&lt;code>-secret-capture-generic-ambient-scope&lt;/code>&lt;/h3>
&lt;p>&lt;em>Capture the ambient scope used in a secret.generic&lt;/em>&lt;/p>
&lt;p>For each value used in the body of a &lt;code>secret.generic&lt;/code> op, which is defined
in the ambient scope outside the &lt;code>generic&lt;/code>, add it to the argument list of
the &lt;code>generic&lt;/code>.&lt;/p>
&lt;h3 id="-secret-distribute-generic">&lt;code>-secret-distribute-generic&lt;/code>&lt;/h3>
&lt;p>&lt;em>Distribute &lt;code>generic&lt;/code> ops through their bodies.&lt;/em>&lt;/p>
&lt;p>Converts &lt;code>generic&lt;/code> ops whose region contains many ops into smaller
sequences of generic ops whose regions contain a single op, dropping the
&lt;code>generic&lt;/code> part from any resulting &lt;code>generic&lt;/code> ops that have no
&lt;code>secret.secret&lt;/code> inputs. If the op has associated regions, and the operands
are not secret, then the generic is distributed recursively through the
op&amp;rsquo;s regions as well.&lt;/p>
&lt;p>This pass is intended to be used as part of a front-end pipeline, where a
program that operates on a secret type annotates the input to a region as
&lt;code>secret&lt;/code>, and then wraps the contents of the region in a single large
&lt;code>secret.generic&lt;/code>, then uses this pass to simplify it.&lt;/p>
&lt;p>The &lt;code>distribute-through&lt;/code> option allows one to specify a comma-separated
list of op names (e.g., &lt;code>distribute-thorugh=&amp;quot;affine.for,scf.if&amp;quot;&lt;/code>), which
limits the distribution to only pass through those ops. If unset, all ops
are distributed through when possible.&lt;/p>
&lt;h4 id="options">Options&lt;/h4>
&lt;pre tabindex="0">&lt;code>-distribute-through : comma-separated list of ops that should be distributed through
&lt;/code>&lt;/pre>&lt;h3 id="-secret-extract-generic-body">&lt;code>-secret-extract-generic-body&lt;/code>&lt;/h3>
&lt;p>&lt;em>Extract the bodies of all generic ops into functions&lt;/em>&lt;/p>
&lt;p>This pass extracts the body of all generic ops into functions, and
replaces the generic bodies with call ops. Used as a sub-operation in
some passes, and extracted into its own pass for testing purposes.&lt;/p>
&lt;p>This pass works best when &lt;code>--secret-generic-absorb-constants&lt;/code> is run
before it so that the extracted function contains any constants used
in the generic op&amp;rsquo;s body.&lt;/p>
&lt;h3 id="-secret-forget-secrets">&lt;code>-secret-forget-secrets&lt;/code>&lt;/h3>
&lt;p>&lt;em>Convert secret types to standard types&lt;/em>&lt;/p>
&lt;p>Drop the &lt;code>secret&amp;lt;...&amp;gt;&lt;/code> type from the IR, replacing it with the contained
type and the corresponding cleartext computation.&lt;/p>
&lt;h3 id="-secret-generic-absorb-constants">&lt;code>-secret-generic-absorb-constants&lt;/code>&lt;/h3>
&lt;p>&lt;em>Copy constants into a secret.generic body&lt;/em>&lt;/p>
&lt;p>For each constant value used in the body of a &lt;code>secret.generic&lt;/code> op, which is
defined in the ambient scope outside the &lt;code>generic&lt;/code>, add it&amp;rsquo;s definition into
the &lt;code>generic&lt;/code> body.&lt;/p>
&lt;h3 id="-secret-merge-adjacent-generics">&lt;code>-secret-merge-adjacent-generics&lt;/code>&lt;/h3>
&lt;p>&lt;em>Merge two adjacent generics into a single generic&lt;/em>&lt;/p>
&lt;p>This pass merges two immedaitely sequential generics into a single
generic. Useful as a sub-operation in some passes, and extracted into
its own pass for testing purposes.&lt;/p></description></item><item><title>Docs: SecretToBGV</title><link>https://heir.dev/docs/passes/secrettobgv/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heir.dev/docs/passes/secrettobgv/</guid><description>
&lt;!-- Autogenerated by mlir-tblgen; don't manually edit -->
&lt;h3 id="-secret-to-bgv">&lt;code>-secret-to-bgv&lt;/code>&lt;/h3>
&lt;p>&lt;em>Lower &lt;code>secret&lt;/code> to &lt;code>bgv&lt;/code> dialect.&lt;/em>&lt;/p>
&lt;p>This pass lowers an IR with &lt;code>secret.generic&lt;/code> blocks containing arithmetic
operations to operations on ciphertexts with the BGV dialect.&lt;/p>
&lt;p>The pass assumes that the &lt;code>secret.generic&lt;/code> regions have been distributed
through arithmetic operations so that only one ciphertext operation appears
per generic block. It also requires that &lt;code>canonicalize&lt;/code> was run so that
non-secret values used are removed from the &lt;code>secret.generic&lt;/code>&amp;rsquo;s block
arguments.&lt;/p>
&lt;p>The pass requires that all types are tensors of a uniform shape matching the
dimension of the ciphertext space specified my &lt;code>poly-mod-degree&lt;/code>.&lt;/p>
&lt;h4 id="options">Options&lt;/h4>
&lt;pre tabindex="0">&lt;code>-poly-mod-degree : Default degree of the cyclotomic polynomial modulus to use for ciphertext space.
-coefficient-mod-bits : Default number of bits of the prime coefficient modulus to use for the ciphertext space.
&lt;/code>&lt;/pre></description></item><item><title>Docs: StraightLineVectorizerPasses</title><link>https://heir.dev/docs/passes/straightlinevectorizerpasses/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heir.dev/docs/passes/straightlinevectorizerpasses/</guid><description>
&lt;!-- Autogenerated by mlir-tblgen; don't manually edit -->
&lt;h3 id="-straight-line-vectorize">&lt;code>-straight-line-vectorize&lt;/code>&lt;/h3>
&lt;p>&lt;em>A vectorizer for straight line programs.&lt;/em>&lt;/p>
&lt;p>This pass ignores control flow and only vectorizes straight-line programs
within a given region.&lt;/p>
&lt;h4 id="options">Options&lt;/h4>
&lt;pre tabindex="0">&lt;code>-dialect : Use this to restrict the dialect whose ops should be vectorized.
&lt;/code>&lt;/pre></description></item><item><title>Docs: TensorExtPasses</title><link>https://heir.dev/docs/passes/tensorextpasses/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heir.dev/docs/passes/tensorextpasses/</guid><description>
&lt;!-- Autogenerated by mlir-tblgen; don't manually edit -->
&lt;h3 id="-collapse-insertion-chains">&lt;code>-collapse-insertion-chains&lt;/code>&lt;/h3>
&lt;p>&lt;em>Collapse chains of extract/insert ops into rotate ops when possible&lt;/em>&lt;/p>
&lt;p>This pass is a cleanup pass for &lt;code>insert-rotate&lt;/code>. That pass sometimes leaves
behind a chain of insertion operations like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-mlir" data-lang="mlir">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">%extracted&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">tensor&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>extract &lt;span style="color:#000">%14&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">%c5&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">tensor&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">16x&lt;/span>&lt;span style="color:#204a87;font-weight:bold">i16&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">%inserted&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">tensor&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>insert &lt;span style="color:#000">%extracted&lt;/span> into &lt;span style="color:#000">%dest&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">%c0&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">tensor&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">16x&lt;/span>&lt;span style="color:#204a87;font-weight:bold">i16&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">%extracted_0&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">tensor&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>extract &lt;span style="color:#000">%14&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">%c6&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">tensor&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">16x&lt;/span>&lt;span style="color:#204a87;font-weight:bold">i16&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">%inserted_1&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">tensor&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>insert &lt;span style="color:#000">%extracted_0&lt;/span> into &lt;span style="color:#000">%inserted&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">%c1&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">tensor&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">16x&lt;/span>&lt;span style="color:#204a87;font-weight:bold">i16&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">%extracted_2&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">tensor&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>extract &lt;span style="color:#000">%14&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">%c7&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">tensor&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">16x&lt;/span>&lt;span style="color:#204a87;font-weight:bold">i16&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">%inserted_3&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">tensor&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>insert &lt;span style="color:#000">%extracted_2&lt;/span> into &lt;span style="color:#000">%inserted_1&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">%c2&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">tensor&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">16x&lt;/span>&lt;span style="color:#204a87;font-weight:bold">i16&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">%extracted_28&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">tensor&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>extract &lt;span style="color:#000">%14&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">%c4&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">tensor&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">16x&lt;/span>&lt;span style="color:#204a87;font-weight:bold">i16&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">%inserted_29&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">tensor&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>insert &lt;span style="color:#000">%extracted_28&lt;/span> into &lt;span style="color:#000">%inserted_27&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">%c15&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">tensor&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">16x&lt;/span>&lt;span style="color:#204a87;font-weight:bold">i16&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>yield &lt;span style="color:#000">%inserted_29&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">tensor&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">16x&lt;/span>&lt;span style="color:#204a87;font-weight:bold">i16&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In many cases, this chain will insert into every index of the &lt;code>dest&lt;/code> tensor,
and the extracted values all come from consistently aligned indices of the same
source tensor. In this case, the chain can be collapsed into a single &lt;code>rotate&lt;/code>.&lt;/p>
&lt;p>Each index used for insertion or extraction must be constant; this may
require running &lt;code>--canonicalize&lt;/code> or &lt;code>--sccp&lt;/code> before this pass to apply
folding rules (use &lt;code>--sccp&lt;/code> if you need to fold constant through control flow).&lt;/p>
&lt;h3 id="-insert-rotate">&lt;code>-insert-rotate&lt;/code>&lt;/h3>
&lt;p>&lt;em>Vectorize arithmetic FHE operations using HECO-style heuristics&lt;/em>&lt;/p>
&lt;p>This pass implements the SIMD-vectorization passes from the
&lt;a href="https://arxiv.org/abs/2202.01649">HECO paper&lt;/a>.&lt;/p>
&lt;p>The pass operates by identifying arithmetic operations that can be suitably
combined into a combination of cyclic rotations and vectorized operations
on tensors. It further identifies a suitable &amp;ldquo;slot target&amp;rdquo; for each operation
and heuristically aligns the operations to reduce unnecessary rotations.&lt;/p>
&lt;p>This pass by itself does not eliminate any operations, but instead inserts
well-chosen rotations so that, for well-structured code (like unrolled affine loops),
a subsequent &lt;code>--cse&lt;/code> and &lt;code>--canonicalize&lt;/code> pass will dramatically reduce the IR.
As such, the pass is designed to be paired with the canonicalization patterns
in &lt;code>tensor_ext&lt;/code>, as well as the &lt;code>collapse-insertion-chains&lt;/code> pass, which
cleans up remaining insertion and extraction ops after the main simplifications
are applied.&lt;/p>
&lt;p>Unlike HECO, this pass operates on plaintext types and tensors, along with
the HEIR-specific &lt;code>tensor_ext&lt;/code> dialect for its cyclic &lt;code>rotate&lt;/code> op. It is intended
to be run before lowering to a scheme dialect like &lt;code>bgv&lt;/code>.&lt;/p>
&lt;h3 id="-rotate-and-reduce">&lt;code>-rotate-and-reduce&lt;/code>&lt;/h3>
&lt;p>&lt;em>Use a logarithmic number of rotations to reduce a tensor.&lt;/em>&lt;/p>
&lt;p>This pass identifies when a commutative, associative binary operation is used
to reduce all of the entries of a tensor to a single value, and optimizes the
operations by using a logarithmic number of reduction operations.&lt;/p>
&lt;p>In particular, this pass identifies an unrolled set of operations of the form
(the binary ops may come in any order):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-mlir" data-lang="mlir">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">%0&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">tensor&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>extract &lt;span style="color:#000">%t&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">tensor&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">8x&lt;/span>&lt;span style="color:#204a87;font-weight:bold">i32&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">%1&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">tensor&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>extract &lt;span style="color:#000">%t&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">tensor&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">8x&lt;/span>&lt;span style="color:#204a87;font-weight:bold">i32&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">%2&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">tensor&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>extract &lt;span style="color:#000">%t&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">tensor&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">8x&lt;/span>&lt;span style="color:#204a87;font-weight:bold">i32&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">%3&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">tensor&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>extract &lt;span style="color:#000">%t&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">tensor&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">8x&lt;/span>&lt;span style="color:#204a87;font-weight:bold">i32&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">%4&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">tensor&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>extract &lt;span style="color:#000">%t&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">4&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">tensor&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">8x&lt;/span>&lt;span style="color:#204a87;font-weight:bold">i32&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">%5&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">tensor&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>extract &lt;span style="color:#000">%t&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">5&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">tensor&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">8x&lt;/span>&lt;span style="color:#204a87;font-weight:bold">i32&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">%6&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">tensor&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>extract &lt;span style="color:#000">%t&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">6&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">tensor&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">8x&lt;/span>&lt;span style="color:#204a87;font-weight:bold">i32&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">%7&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">tensor&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>extract &lt;span style="color:#000">%t&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">7&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">tensor&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">8x&lt;/span>&lt;span style="color:#204a87;font-weight:bold">i32&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">%8&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> arith&lt;span style="color:#000;font-weight:bold">.&lt;/span>addi &lt;span style="color:#000">%0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">%1&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">%9&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> arith&lt;span style="color:#000;font-weight:bold">.&lt;/span>addi &lt;span style="color:#000">%8&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">%2&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">%10&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> arith&lt;span style="color:#000;font-weight:bold">.&lt;/span>addi &lt;span style="color:#000">%9&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">%3&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">%11&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> arith&lt;span style="color:#000;font-weight:bold">.&lt;/span>addi &lt;span style="color:#000">%10&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">%4&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">%12&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> arith&lt;span style="color:#000;font-weight:bold">.&lt;/span>addi &lt;span style="color:#000">%11&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">%5&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">%13&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> arith&lt;span style="color:#000;font-weight:bold">.&lt;/span>addi &lt;span style="color:#000">%12&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">%6&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">%14&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> arith&lt;span style="color:#000;font-weight:bold">.&lt;/span>addi &lt;span style="color:#000">%13&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">%7&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>and replaces it with a logarithmic number of &lt;code>rotate&lt;/code> and &lt;code>addi&lt;/code> operations:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-mlir" data-lang="mlir">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">%0&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">tensor&lt;/span>_ext&lt;span style="color:#000;font-weight:bold">.&lt;/span>rotate &lt;span style="color:#000">%t&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">tensor&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">8x&lt;/span>&lt;span style="color:#204a87;font-weight:bold">i32&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">%1&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> arith&lt;span style="color:#000;font-weight:bold">.&lt;/span>addi &lt;span style="color:#000">%t&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">%0&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">tensor&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">8x&lt;/span>&lt;span style="color:#204a87;font-weight:bold">i32&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">%2&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">tensor&lt;/span>_ext&lt;span style="color:#000;font-weight:bold">.&lt;/span>rotate &lt;span style="color:#000">%1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">tensor&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">8x&lt;/span>&lt;span style="color:#204a87;font-weight:bold">i32&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">%3&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> arith&lt;span style="color:#000;font-weight:bold">.&lt;/span>addi &lt;span style="color:#000">%1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">%2&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">tensor&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">8x&lt;/span>&lt;span style="color:#204a87;font-weight:bold">i32&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">%4&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">tensor&lt;/span>_ext&lt;span style="color:#000;font-weight:bold">.&lt;/span>rotate &lt;span style="color:#000">%3&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">tensor&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">8x&lt;/span>&lt;span style="color:#204a87;font-weight:bold">i32&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">%5&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> arith&lt;span style="color:#000;font-weight:bold">.&lt;/span>addi &lt;span style="color:#000">%3&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">%4&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">tensor&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">8x&lt;/span>&lt;span style="color:#204a87;font-weight:bold">i32&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: UnusedMemRefPasses</title><link>https://heir.dev/docs/passes/unusedmemrefpasses/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heir.dev/docs/passes/unusedmemrefpasses/</guid><description>
&lt;!-- Autogenerated by mlir-tblgen; don't manually edit -->
&lt;h3 id="-remove-unused-memref">&lt;code>-remove-unused-memref&lt;/code>&lt;/h3>
&lt;p>&lt;em>Cleanup any unused memrefs&lt;/em>&lt;/p>
&lt;p>Scan the IR for unused memrefs and remove them.&lt;/p>
&lt;p>This pass looks for locally allocated memrefs that are never used and
deletes them. This pass can be used as a cleanup pass from other IR
simplifications that forward stores to loads.&lt;/p></description></item><item><title>Docs: YosysOptimizerPasses</title><link>https://heir.dev/docs/passes/yosysoptimizerpasses/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heir.dev/docs/passes/yosysoptimizerpasses/</guid><description>
&lt;!-- Autogenerated by mlir-tblgen; don't manually edit -->
&lt;h3 id="-yosys-optimizer">&lt;code>-yosys-optimizer&lt;/code>&lt;/h3>
&lt;p>&lt;em>Invoke Yosys to perform circuit optimization.&lt;/em>&lt;/p>
&lt;p>This pass invokes Yosys to convert an arithmetic circuit to an optimized
boolean circuit that uses the arith and comb dialects.&lt;/p>
&lt;p>Note that booleanization changes the function signature: multi-bit integers
are transformed to a tensor of booleans, for example, an &lt;code>i8&lt;/code> is converted
to &lt;code>tensor&amp;lt;8xi1&amp;gt;&lt;/code>.&lt;/p>
&lt;p>The optimizer will be applied to each &lt;code>secret.generic&lt;/code> op containing
arithmetic ops that can be optimized.&lt;/p>
&lt;p>Optional parameters:&lt;/p>
&lt;ul>
&lt;li>&lt;code>abc-fast&lt;/code>: Run the abc optimizer in &amp;ldquo;fast&amp;rdquo; mode, getting faster compile
time at the expense of a possibly larger output circuit.&lt;/li>
&lt;li>&lt;code>unroll-factor&lt;/code>: Before optimizing the circuit, unroll loops by a given
factor. If unset, this pass will not unroll any loops.&lt;/li>
&lt;li>&lt;code>print-stats&lt;/code>: Prints statistics about the optimized circuits.&lt;/li>
&lt;li>&lt;code>mode={Boolean,LUT}&lt;/code>: Map gates to boolean gates or lookup table gates.&lt;/li>
&lt;/ul>
&lt;h4 id="statistics">Statistics&lt;/h4>
&lt;pre tabindex="0">&lt;code>total circuit size : The total circuit size for all optimized circuits, after optimization is done.
&lt;/code>&lt;/pre></description></item></channel></rss>